// Code generated by gen-grpc-protocol. DO NOT EDIT.

{{$expService := camelCase .Protocol.Protocol -}}
{{$intService := camelBack .Protocol.Protocol -}}

package {{.Package}}

import (
	context "context"
	goavro "github.com/linkedin/goavro/v2"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// {{$expService}}Client is the client API for the {{.Protocol.Protocol}} service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type {{$expService}}Client interface {
{{range $name, $message := .Protocol.Messages -}}
	// {{$message.Doc}}
{{if eq $message.Stream "request" -}}
	{{camelCase $name}}(ctx context.Context, opts ...grpc.CallOption) ({{$expService}}_{{camelCase $name}}Client, error)
{{else if eq $message.Stream "response" -}}
	{{camelCase $name}}(ctx context.Context, in map[string]interface{}, opts ...grpc.CallOption) ({{$expService}}_{{camelCase $name}}Client, error)
{{else if eq $message.Stream "bidir" -}}
	{{camelCase $name}}(ctx context.Context, opts ...grpc.CallOption) ({{$expService}}_{{camelCase $name}}Client, error)
{{else -}}
	{{camelCase $name}}(ctx context.Context, in map[string]interface{}, opts ...grpc.CallOption) (interface{}, error)
{{end -}}
{{end -}}
}

type {{$intService}}Client struct {
	cc grpc.ClientConnInterface
}

func New{{$expService}}Client(cc grpc.ClientConnInterface) {{$expService}}Client {
	return &{{$intService}}Client{cc}
}

{{$streamIndex := 0}}
{{range $name, $message := .Protocol.Messages}}
{{if eq $message.Stream "request"}}
func (c *{{$intService}}Client) {{camelCase $name}}(ctx context.Context, opts ...grpc.CallOption) ({{$expService}}_{{camelCase $name}}Client, error) {
	stream, err := c.cc.NewStream(ctx, &_{{$expService}}_serviceDesc.Streams[{{$streamIndex}}], "/{{$.Protocol.Protocol}}/{{$name}}", opts...)
	if err != nil {
		return nil, err
	}
	x := &{{$intService}}{{camelCase $name}}Client{stream}
	return x, nil
}

type {{$expService}}_{{camelCase $name}}Client interface {
	Send(interface{}) error
	CloseAndRecv() (interface{}, error)
	grpc.ClientStream
}

type {{$intService}}{{camelCase $name}}Client struct {
	grpc.ClientStream
}

func (x *{{$intService}}{{camelCase $name}}Client) Send(m interface{}) error {
	buf, err := _{{$expService}}_{{camelCase $name}}_requestCodec.BinaryFromNative(nil, m)
	if err != nil {
		return err
	}
	return x.ClientStream.SendMsg(buf)
}

func (x *{{$intService}}{{camelCase $name}}Client) CloseAndRecv() (interface{}, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	var buf []byte
	if err := x.ClientStream.RecvMsg(&buf); err != nil {
		return nil, err
	}
	m, _, err := _{{$expService}}_{{camelCase $name}}_responseCodec.NativeFromBinary(buf)
	if err != nil {
		return nil, err
	}
	return m, nil
}
{{$streamIndex := inc $streamIndex}}
{{else if eq $message.Stream "response"}}
func (c *{{$intService}}Client) {{camelCase $name}}(ctx context.Context, in map[string]interface{}, opts ...grpc.CallOption) ({{$expService}}_{{camelCase $name}}Client, error) {
	stream, err := c.cc.NewStream(ctx, &_{{$expService}}_serviceDesc.Streams[{{$streamIndex}}], "/{{$.Protocol.Protocol}}/{{$name}}", opts...)
	if err != nil {
		return nil, err
	}
	buf, err := _{{$expService}}_{{camelCase $name}}_requestCodec.BinaryFromNative(nil, in)
	if err != nil {
		return nil, err
	}
	x := &{{$intService}}{{camelCase $name}}Client{stream}
	if err := x.ClientStream.SendMsg(buf); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type {{$expService}}_{{camelCase $name}}Client interface {
	Recv() (interface{}, error)
	grpc.ClientStream
}

type {{$intService}}{{camelCase $name}}Client struct {
	grpc.ClientStream
}

func (x *{{$intService}}{{camelCase $name}}Client) Recv() (interface{}, error) {
	var buf []byte
	if err := x.ClientStream.RecvMsg(&buf); err != nil {
		return nil, err
	}
	m, _, err := _{{$expService}}_{{camelCase $name}}_responseCodec.NativeFromBinary(buf)
	if err != nil {
		return nil, err
	}
	return m, nil
}
{{$streamIndex := inc $streamIndex}}
{{else if eq $message.Stream "bidir"}}
func (c *{{$intService}}Client) {{camelCase $name}}(ctx context.Context, opts ...grpc.CallOption) ({{$expService}}_{{camelCase $name}}Client, error) {
	stream, err := c.cc.NewStream(ctx, &_{{$expService}}_serviceDesc.Streams[{{$streamIndex}}], "/{{$.Protocol.Protocol}}/{{$name}}", opts...)
	if err != nil {
		return nil, err
	}
	x := &{{$intService}}{{camelCase $name}}Client{stream}
	return x, nil
}

type {{$expService}}_{{camelCase $name}}Client interface {
	Send(interface{}) error
	Recv() (interface{}, error)
	grpc.ClientStream
}

type {{$intService}}{{camelCase $name}}Client struct {
	grpc.ClientStream
}

func (x *{{$intService}}{{camelCase $name}}Client) Send(m interface{}) error {
	buf, err := _{{$expService}}_{{camelCase $name}}_requestCodec.BinaryFromNative(nil, m)
	if err != nil {
		return err
	}
	return x.ClientStream.SendMsg(buf)
}

func (x *{{$intService}}{{camelCase $name}}Client) Recv() (interface{}, error) {
	var buf []byte
	if err := x.ClientStream.RecvMsg(&buf); err != nil {
		return nil, err
	}
	m, _, err := _{{$expService}}_{{camelCase $name}}_responseCodec.NativeFromBinary(buf)
	if err != nil {
		return nil, err
	}
	return m, nil
}
{{$streamIndex := inc $streamIndex}}
{{else}}
func (c *{{$intService}}Client) {{camelCase $name}}(ctx context.Context, in map[string]interface{}, opts ...grpc.CallOption) (interface{}, error) {
	buf, err := _{{$expService}}_{{camelCase $name}}_requestCodec.BinaryFromNative(nil, in)
	if err != nil {
		return nil, err
	}
	if err = c.cc.Invoke(ctx, "/{{$.Protocol.Protocol}}/{{$name}}", buf, &buf, opts...); err != nil {
		return nil, err
	}
	out, _, err := _{{$expService}}_{{camelCase $name}}_responseCodec.NativeFromBinary(buf)
	if err != nil {
		return nil, err
	}
	return out, nil
}
{{end}}
{{end}}

// {{$expService}}Server is the server API for the {{.Protocol.Protocol}} service.
// All implementations must embed Unimplemented{{$expService}}Server
// for forward compatibility
type {{$expService}}Server interface {
{{range $name, $message := .Protocol.Messages -}}
	// {{$message.Doc}}
{{if eq $message.Stream "request" -}}
	{{camelCase $name}}(srv {{$expService}}_{{camelCase $name}}Server) error
{{else if eq $message.Stream "response" -}}
	{{camelCase $name}}(in map[string]interface{}, srv {{$expService}}_{{camelCase $name}}Server) error
{{else if eq $message.Stream "bidir" -}}
	{{camelCase $name}}(srv {{$expService}}_{{camelCase $name}}Server) error
{{else -}}
	{{camelCase $name}}(ctx context.Context, in map[string]interface{}) (interface{}, error)
{{end -}}
{{end -}}
	mustEmbedUnimplemented{{$expService}}Server()
}

// Unimplemented{{$expService}}Server must be embedded to have forward compatible implementations.
type Unimplemented{{$expService}}Server struct {
}

{{range $name, $message := .Protocol.Messages}}
{{if eq $message.Stream "request"}}
func (Unimplemented{{$expService}}Server) {{camelCase $name}}({{$expService}}_{{camelCase $name}}Server) error {
	return status.Errorf(codes.Unimplemented, "method {{camelCase $name}} not implemented")
}
{{else if eq $message.Stream "response"}}
func (Unimplemented{{$expService}}Server) {{camelCase $name}}(map[string]interface{}, {{$expService}}_{{camelCase $name}}Server) error {
	return status.Errorf(codes.Unimplemented, "method {{camelCase $name}} not implemented")
}
{{else if eq $message.Stream "bidir"}}
func (Unimplemented{{$expService}}Server) {{camelCase $name}}({{$expService}}_{{camelCase $name}}Server) error {
	return status.Errorf(codes.Unimplemented, "method {{camelCase $name}} not implemented")
}
{{else}}
func (Unimplemented{{$expService}}Server) {{camelCase $name}}(context.Context, map[string]interface{}) (interface{}, error) {
	return nil, status.Errorf(codes.Unimplemented, "method {{camelCase $name}} not implemented")
}
{{end}}
{{end}}

func (Unimplemented{{$expService}}Server) mustEmbedUnimplemented{{$expService}}Server() {}

// Unsafe{{$expService}}Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to {{$expService}}Server will
// result in compilation errors.
type Unsafe{{$expService}}Server interface {
	mustEmbedUnimplemented{{$expService}}Server()
}

func Register{{$expService}}Server(s grpc.ServiceRegistrar, srv {{$expService}}Server) {
	s.RegisterService(&_{{$expService}}_serviceDesc, srv)
}

{{range $name, $message := .Protocol.Messages}}
{{if eq $message.Stream "request"}}
func _{{$expService}}_{{camelCase $name}}_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.({{$expService}}Server).{{camelCase $name}}(&{{$intService}}{{camelCase $name}}Server{stream})
}

type {{$expService}}_{{camelCase $name}}Server interface {
	SendAndClose(interface{}) error
	Recv() (interface{}, error)
	grpc.ServerStream
}

type {{$intService}}{{camelCase $name}}Server struct {
	grpc.ServerStream
}

func (x *{{$intService}}{{camelCase $name}}Server) SendAndClose(m interface{}) error {
	buf, err := _{{$expService}}_{{camelCase $name}}_responseCodec.BinaryFromNative(nil, m)
	if err != nil {
		return err
	}
	return x.ServerStream.SendMsg(buf)
}

func (x *{{$intService}}{{camelCase $name}}Server) Recv() (interface{}, error) {
	var buf []byte
	if err := x.ServerStream.RecvMsg(&buf); err != nil {
		return nil, err
	}
	m, _, err := _{{$expService}}_{{camelCase $name}}_requestCodec.NativeFromBinary(buf)
	if err != nil {
		return nil, err
	}
	return m, nil
}
{{else if eq $message.Stream "response"}}
func _{{$expService}}_{{camelCase $name}}_Handler(srv interface{}, stream grpc.ServerStream) error {
	var buf []byte
	if err := stream.RecvMsg(&buf); err != nil {
		return err
	}
	blob, _, err := _{{$expService}}_{{camelCase $name}}_requestCodec.NativeFromBinary(buf)
	if err != nil {
		return err
	}
	in := blob.(map[string]interface{})
	return srv.({{$expService}}Server).{{camelCase $name}}(in, &{{$intService}}{{camelCase $name}}Server{stream})
}

type {{$expService}}_{{camelCase $name}}Server interface {
	Send(interface{}) error
	grpc.ServerStream
}

type {{$intService}}{{camelCase $name}}Server struct {
	grpc.ServerStream
}

func (x *{{$intService}}{{camelCase $name}}Server) Send(m interface{}) error {
	buf, err := _{{$expService}}_{{camelCase $name}}_responseCodec.BinaryFromNative(nil, m)
	if err != nil {
		return err
	}
	return x.ServerStream.SendMsg(buf)
}
{{else if eq $message.Stream "bidir"}}
func _{{$expService}}_{{camelCase $name}}_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.({{$expService}}Server).{{camelCase $name}}(&{{$intService}}{{camelCase $name}}Server{stream})
}

type {{$expService}}_{{camelCase $name}}Server interface {
	Send(interface{}) error
	Recv() (interface{}, error)
	grpc.ServerStream
}

type {{$intService}}{{camelCase $name}}Server struct {
	grpc.ServerStream
}

func (x *{{$intService}}{{camelCase $name}}Server) Send(m interface{}) error {
	buf, err := _{{$expService}}_{{camelCase $name}}_responseCodec.BinaryFromNative(nil, m)
	if err != nil {
		return err
	}
	return x.ServerStream.SendMsg(buf)
}

func (x *{{$intService}}{{camelCase $name}}Server) Recv() (interface{}, error) {
	var buf []byte
	if err := x.ServerStream.RecvMsg(&buf); err != nil {
		return nil, err
	}
	m, _, err := _{{$expService}}_{{camelCase $name}}_requestCodec.NativeFromBinary(buf)
	if err != nil {
		return nil, err
	}
	return m, nil
}
{{else}}
func _{{$expService}}_{{camelCase $name}}_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	var buf []byte
	if err := dec(&buf); err != nil {
		return nil, err
	}
	blob, _, err := _{{$expService}}_{{camelCase $name}}_requestCodec.NativeFromBinary(buf)
	if err != nil {
		return nil, status.Errorf(codes.Internal, "error unmarshaling {{camelCase $name}} request: " + err.Error())
	}
	in := blob.(map[string]interface{})
	if interceptor == nil {
		out, err := srv.({{$expService}}Server).{{camelCase $name}}(ctx, in)
		if  err != nil {
			return nil, err
		}
		if out, err = _{{$expService}}_{{camelCase $name}}_responseCodec.BinaryFromNative(nil, out); err != nil {
			return nil, status.Errorf(codes.Internal, "error marshaling {{camelCase $name}} response: " + err.Error())
		}
		return out, nil
	}
	info := &grpc.UnaryServerInfo{
		Server:	    srv,
		FullMethod: "/{{$.Protocol.Protocol}}/{{$name}}",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		out, err := srv.({{$expService}}Server).{{camelCase $name}}(ctx, req.(map[string]interface{}))
		if err != nil {
			return nil, err
		}
		if out, err = _{{$expService}}_{{camelCase $name}}_responseCodec.BinaryFromNative(nil, out); err != nil {
			return nil, status.Errorf(codes.Internal, "error marshaling {{camelCase $name}} response: " + err.Error())
		}
		return out, nil
	}
	return interceptor(ctx, in, info, handler)
}
{{end}}
{{end}}

var (
	_{{$expService}}_serviceDesc = grpc.ServiceDesc{
		ServiceName: "{{.Protocol.Protocol}}",
		HandlerType: (*{{$expService}}Server)(nil),
		Methods: []grpc.MethodDesc{
{{range $name, $message := .Protocol.Messages -}}
{{if eq $message.Stream "" -}}
			{
				MethodName: "{{$name}}",
				Handler:    _{{$expService}}_{{camelCase $name}}_Handler,
			},
{{end -}}
{{end -}}
		},
		Streams:  []grpc.StreamDesc{
{{range $name, $message := .Protocol.Messages -}}
{{if ne $message.Stream "" -}}
			{
				StreamName:    "{{$name}}",
				Handler:       _{{$expService}}_{{camelCase $name}}_Handler,
{{if eq $message.Stream "response" "bidir" -}}
				ServerStreams: true,
{{end -}}
{{if eq $message.Stream "request" "bidir" -}}
				ClientStreams: true,
{{end -}}
			},
{{end -}}
{{end -}}
		},
		Metadata: "{{.Metadata}}",
	}

{{range $name, $message := .Protocol.Messages -}}
	_{{$expService}}_{{camelCase $name}}_requestCodec *goavro.Codec
	_{{$expService}}_{{camelCase $name}}_responseCodec *goavro.Codec
{{end -}}
)

func init() {
	var err error
{{range $name, $message := .Protocol.Messages -}}
	if _{{$expService}}_{{camelCase $name}}_requestCodec, err = goavro.NewCodec(`{{$message.RequestSchema}}`); err != nil {
		panic(err)
	}
	if _{{$expService}}_{{camelCase $name}}_responseCodec, err = goavro.NewCodec(`{{$message.ResponseSchema}}`); err != nil {
		panic(err)
	}
{{end -}}
}
